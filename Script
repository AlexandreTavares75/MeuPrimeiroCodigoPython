##SCRIPT

##Instale as bibliotecas abaixo
import pandas as pd
import win32com.client as win32
import os
from bs4 import BeautifulSoup
from fpdf import FPDF
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.platypus.flowables import Image
import openpyxl

bdEmail = pd.read_excel("Lista_Convidados.xlsx")
numeroLinhasBdEmail = bdEmail["Nome"].count()
print(f" Número total de linhas importadas do excel: {numeroLinhasBdEmail}")


for i in range(numeroLinhasBdEmail):
    
    nomeCompletoDestinatario =  bdEmail["Nome"].loc[i]
    primeiroNomeDestinatario = nomeCompletoDestinatario[0: nomeCompletoDestinatario.index(' ')]
    nomeCompletoCargo = bdEmail["Cargo"].loc[i]
    nomeCompletoCargo1 = bdEmail["Cargo1"].loc[i]
    nomeCompletoCargo2 = bdEmail["Cargo2"].loc[i]
    nomeCompletoCargo3 = bdEmail["Cargo3"].loc[i]
    nomeTratamento = bdEmail["Pronome"].loc[i]
    emailDestinatario = bdEmail["Email"].loc[i]
    assunto = "Convite - Nome do evento ao qual você está convidando"
     
    
    outlook = win32.Dispatch('outlook.application')

    email = outlook.CreateItem(0)
    
    email.To = emailDestinatario
    email.Subject = assunto
    anexo = fr'C:\Users\fulanodetal\2024\E-mail automático\Convite.jpg'
    anexo1 = fr'C:\Users\fulanodetal\2024\E-mail automático\E-mail automático\Assinatura_do_email.jpg'
    email.Attachments.Add(anexo)
    email.Attachments.Add(anexo1) 
    email.HTMLBody = f"""

<html>
<body>
    <p>{nomeTratamento}
    <b> 
    <p>{nomeCompletoDestinatario}
    </b><br>
    {nomeCompletoCargo}
    </b><br>
    {nomeCompletoCargo1}
    </b><br>
    {nomeCompletoCargo2}
    </b><br>
    {nomeCompletoCargo3}
    <br>
    </p>
</body>
</html>                  

<p>Gostaríamos de contar com a sua participação no  <b>nome do evento</b>, oportunidade de conhecer e/ou participar de xpo 

</p>

<p> Confirmação de presença até o dia dd/mm/2024 – cyz@dominio.com </p>

<html>
    <body>
        <img style= 'max-height:300px; max-width: 700px; width:auto; height:auto;' src='Convite.jpg'>
    </body>
<html>

<p>

</p>

<html>
    <body>
        <img style= 'max-height:35px; max-width: 70px; width:auto; height:auto;' src='Assinatura_do_email.jpg'>
    </body>
<html>
    """
    
    email.Send()
    print(f"E-mail Nº {i} para {nomeCompletoDestinatario} {nomeCompletoCargo} {emailDestinatario} Enviado com sucesso! [OK]")

# Função para enviar e-mail
def send_email(email, name):
    try:
        # Lógica para enviar o e-mail
        return True
    except:
        return False
    
# Ler os dados do Excel
workbook = openpyxl.load_workbook('Lista_convidados.xlsx')
sheet = workbook.active

# Criar uma lista com os dados
data = []
for row in range(1, sheet.max_row + 1):
    name = sheet.cell(row=row, column=2).value
    status = "Enviado com sucesso" if send_email(sheet.cell(row=row, column=8).value, name) else "Não enviado"
    data.append([name, status])

# Gerar o relatório em PDF
doc = SimpleDocTemplate("relatorio_envio_emails.pdf", pagesize=A4)
styles = getSampleStyleSheet()

# Adicionar logomarca no cabeçalho
logo = Image('logo.png', width=2*90, height=1*65)
logo.hAlign = 'CENTER'

title = Paragraph(f"Relatório de envio de e-mails",  ParagraphStyle(name='Title', fontName='Helvetica-Bold', fontSize=16))
title.hAlign = 'CENTER'

# Adicionar data do envio dos e-mails
date = Paragraph(f"Data do envio: {datetime.now().strftime('%d/%m/%Y')}", ParagraphStyle(name='Date', fontName='Helvetica-Bold', fontSize=12))
date.hAlign = 'RIGHT'


table = Table(data)
style = TableStyle([
    ('BACKGROUND', (0,0), (-1,0), colors.darkblue),
    ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
    ('ALIGN', (0,0), (-1,-1), 'CENTER'),
    ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
    ('FONTSIZE', (0,0), (-1,0), 16),
    ('BOTTOMPADDING', (0,0), (-1,0), 14),
    ('BACKGROUND', (0,1), (-1,-1), colors.white),
    ('GRID', (0,0), (-1,-1), 1, colors.black)
])
table.setStyle(style)
elements = elements = [logo, Spacer(1, 20), title, Spacer(1, 10), date, Spacer(1,20), table]
doc.build(elements)
